#This file is adapted to the needs of the Eclipse Packaging Project.
#Do not modify.

# A comma separated list of feature ids that will be part of the archive.
# Provided by EPP. 
#featureList =  

# A comma seperated list of the component from which the features listed in featureList can be found
# This is used as a optimization to avoid unnecessary downloads. * should be specified if you don't know
componentFilter=*
#, emf, cdt, hyades, ve, uml2

# filter to optimize the download of archives. Blank does not filter anything.
contentFilter=

# The list of {os, ws, arch} configurations to build.  This 
# value is a '&' separated list of ',' separate triples. 
# Provided by EPP.
#config=
#   macosx,carbon,x86&\
#	win32,win32,x86&\   
#	linux, gtk, ppc

#Don't download packager map files, they should already exist in ${downloadDirectory}
#comment out this property to download the map file from packagerMapURL
localMaps = true
#The URL from which to download the packager map file
#packagerMapURL = 


################ FOLDERS ############################
#The directory used as a base for the all process. 
#Provided by EPP.
#baseDirectory =

# The place in which all the scripts will be contained
workingDirectory = ${baseDirectory}/workingPlace
buildDirectory = ${workingDirectory}

# The folder in which all the zips will be downloaded
downloadDirectory = ${baseDirectory}/toPackage

# The folder where all the operations are being done
tempDirectory = ${baseDirectory}/temp

# The place in which the zips are located
sourceFolder = ${downloadDirectory}

################# SOURCES ###########################
# The name of the root of the archives downloaded.  Features and plug-ins will be looked for 
# in ${tempDirectory}/${featurePaths}/features and ${tempDirectory}/${featurePaths}/plugins 
# It is possible to specify a list of roots, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=143854  for details.
featurePaths = eclipse


################## MISC ##########################
# This controls the build id in the default name of the archive
buildId=EclipsePackagerBuild

# Type of build.  Used in naming the build output.  Typically this value is
# one of I, N, M, S, ...
buildType=I

#Set the name of the archive that will result from the product build.
archiveNamePrefix =RCP

# Label for the build.  Used in naming the build output
buildLabel=${buildType}.${buildId}

#The format of the archive. By default a zip is created using antZip.
# Provided by EPP.
# archivesFormat=
# macosx,carbon,x86-tar&\
# linux,gtk,x86-tar&\
# win32,win32,x86-antZip


# extra arguments to be passed to zip / unzip (-y is usually used on unix for zip)
zipargs=
unzipArgs=

# the prefix in the archive
archivePrefix=eclipse

# the folder in which the files that will be added to the archive will be placed
collectingFolder=eclipse


############### PACKAGING.PROPERTIES #############################
# a relative path to the file containing the properties for element to package
packagingProperties = packaging.properties
